package test_module

file_number 0 "fake_file.x"

chan main_chandecl_test_module_x_29_18_29_26(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")

top proc __test_module__main_0_next(__token: token, __state: (), init={()}) {
  literal.3: bits[1] = literal(value=1, id=3)
  tuple.4: () = tuple(id=4)
  after_all.5: token = after_all(__token, id=5)
  next (after_all.5, tuple.4)
}

proc __test_module__main__producer_0_next(__token: token, __state: bits[1], init={1}) {
  zero_ext.9: bits[32] = zero_ext(__state, new_bit_count=32, id=9)
  _: token = send(__token, zero_ext.9, predicate=__state, channel_id=0, id=10)
  literal.8: bits[1] = literal(value=1, id=8)
  not.11: bits[1] = not(__state, id=11)
  after_all.12: token = after_all(__token, _, id=12)
  next (after_all.12, not.11)
}

proc __test_module__main__consumer_0_next(__token: token, __state: bits[1], init={1}) {
  receive.16: (token, bits[32]) = receive(__token, predicate=__state, channel_id=0, id=16)
  tuple_index.17: token = tuple_index(receive.16, index=0, id=17)
  literal.15: bits[1] = literal(value=1, id=15)
  foo: bits[32] = tuple_index(receive.16, index=1, id=18)
  not.19: bits[1] = not(__state, id=19)
  after_all.20: token = after_all(__token, tuple_index.17, id=20)
  next (after_all.20, not.19)
}
